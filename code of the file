#define MAX_ITEMS 100

// Structure to store item details
typedef struct {
    int id;
    char name[50];
    int quantity;
    float price;
} Item;

Item inventory[MAX_ITEMS];
int itemCount = 0;

// Function to add an item
void addItem() {
    if (itemCount >= MAX_ITEMS) {
        printf("Inventory is full. Cannot add more items.\n");
        return;
    }

    printf("Enter item ID: ");
    scanf("%d", &inventory[itemCount].id);
    printf("Enter item name: ");
    scanf(" %[^\n]", inventory[itemCount].name);  // To accept strings with spaces
    printf("Enter item quantity: ");
    scanf("%d", &inventory[itemCount].quantity);
    printf("Enter item price: ");
    scanf("%f", &inventory[itemCount].price);

    itemCount++;
    printf("Item added successfully!\n");
}

// Function to view all items
void viewInventory() {
    if (itemCount == 0) {
        printf("Inventory is empty.\n");
        return;
    }

    printf("\nID\tName\t\tQuantity\tPrice\n");
    printf("--------------------------------------------\n");
    for (int i = 0; i < itemCount; i++) {
        printf("%d\t%s\t\t%d\t\t%.2f\n", inventory[i].id, inventory[i].name, inventory[i].quantity, inventory[i].price);
    }
}

// Function to search for an item
void searchItem() {
    int id;
    printf("Enter item ID to search: ");
    scanf("%d", &id);

    for (int i = 0; i < itemCount; i++) {
        if (inventory[i].id == id) {
            printf("\nItem found:\n");
            printf("ID: %d\nName: %s\nQuantity: %d\nPrice: %.2f\n", inventory[i].id, inventory[i].name, inventory[i].quantity, inventory[i].price);
            return;
        }
    }

    printf("Item with ID %d not found.\n", id);
}

// Function to update an item
void updateItem() {
    int id;
    printf("Enter item ID to update: ");
    scanf("%d", &id);

    for (int i = 0; i < itemCount; i++) {
        if (inventory[i].id == id) {
            printf("Enter new name: ");
            scanf(" %[^\n]", inventory[i].name);
            printf("Enter new quantity: ");
            scanf("%d", &inventory[i].quantity);
            printf("Enter new price: ");
            scanf("%f", &inventory[i].price);
            printf("Item updated successfully!\n");
            return;
        }
    }

    printf("Item with ID %d not found.\n", id);
}

// Function to delete an item
void deleteItem() {
    int id;
    printf("Enter item ID to delete: ");
    scanf("%d", &id);

    for (int i = 0; i < itemCount; i++) {
        if (inventory[i].id == id) {
            for (int j = i; j < itemCount - 1; j++) {
                inventory[j] = inventory[j + 1];
            }
            itemCount--;
            printf("Item deleted successfully!\n");
            return;
        }
    }

    printf("Item with ID %d not found.\n", id);
}

// Function to calculate total inventory value
void calculateTotalValue() {
    float totalValue = 0;

    for (int i = 0; i < itemCount; i++) {
        totalValue += inventory[i].quantity * inventory[i].price;
    }

    printf("Total inventory value: %.2f\n", totalValue);
}

// Main function with menu-driven interface
int main() {
    int choice;

    do {
        printf("\n--- Inventory Management System ---\n");
        printf("1. Add Item\n");
        printf("2. View Inventory\n");
        printf("3. Search Item\n");
        printf("4. Update Item\n");
        printf("5. Delete Item\n");
        printf("6. Calculate Total Inventory Value\n");
        printf("7. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                addItem();
                break;
            case 2:
                viewInventory();
                break;
            case 3:
                searchItem();
                break;
            case 4:
                updateItem();
                break;
            case 5:
                deleteItem();
                break;
            case 6:
                calculateTotalValue();
                break;
            case 7:
                printf("Exiting program. Goodbye!\n");
                break;
            default:
                printf("Invalid choice. Please try again.\n");
        }
    } while (choice != 7);

    return 0;
}
